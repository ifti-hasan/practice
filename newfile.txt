
 Select a level
Main
Remote
Introduction Sequence
A nicely paced introduction to the majority of git commands

1: Introduction to Git Commits

Ramping Up
The next serving of 100% git awesomes-ness. Hope you're hungry

4: Reversing Changes in Git

Moving Work Around
"Git" comfortable with modifying the source tree :P

1: Cherry-pick Intro

1
2
A Mixed Bag
A mixed bag of Git techniques, tricks, and tips

1: Grabbing Just 1 Commit

1
2
3
4
5
Advanced Topics
For the truly brave!

1: Rebasing over 9000 times

1
2
3
Git Commits
A commit in a git repository records a snapshot of all the (tracked) files in your directory. It's like a giant copy and paste, but even better!

Git wants to keep commits as lightweight as possible though, so it doesn't just blindly copy the entire directory every time you commit. It can (when possible) compress a commit as a set of changes, or a "delta", from one version of the repository to the next.

Git also maintains a history of which commits were made when. That's why most commits have ancestor commits above them -- we designate this with arrows in our visualization. Maintaining history is great for everyone working on the project!

It's a lot to take in, but for now you can think of commits as snapshots of the project. Commits are very lightweight and switching between them is wicked fast!

Close
Next
 Git Demonstration
Let's see what this looks like in practice. On the right we have a visualization of a (small) git repository. There are two commits right now -- the first initial commit, C0, and one commit after that C1 that might have some meaningful changes.

Hit the button below to make a new commit.